<#@ template language="C#" hostspecific="true" debug="true" #>
<#@ output extension=".cs" encoding="utf-8" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Reflection" #>
<#

var syntax = XDocument.Load(Host.ResolvePath("Syntax.xml"), LoadOptions.SetLineInfo).Root;

var skip = new HashSet<string>
{
    "StructuredTriviaSyntax",
    "XmlAttributeSyntax",
    "XmlNodeSyntax",
};

var types = new List<SyntaxType>();

foreach (var element in syntax.Elements())
{
    bool isAbstract = false;
    if (element.Name.LocalName == "AbstractNode")
        isAbstract = true;
    else if (element.Name.LocalName != "Node")
        continue;

    IXmlLineInfo info = element;
    var lineNumber = info.LineNumber;

    string name = element.Attribute("Name").Value;
    string baseType = element.Attribute("Base").Value;

    if (skip.Contains(name) || skip.Contains(baseType) || name.Contains("Xml") || name.Contains("Cref"))
    {
        skip.Add(name);
        continue;
    }

    var type = new SyntaxType
    {
        Name = name,
        BaseType = baseType,
        Abstract = isAbstract,
        LineNumber = lineNumber,
    };

    if (element.Elements("Kind").Count() > 1)
    {
        type.Fields.Add(new SyntaxField
        {
            Name = "Kind",
            Type = "SyntaxKind",
            Default = "default(SyntaxKind)"
        });
    }

    foreach (var field in element.Elements("Field"))
    {
        string fieldName = field.Attribute("Name").Value;
        string fieldType = field.Attribute("Type").Value;
        bool fieldOverride = field.Attribute("Override") != null && field.Attribute("Override").Value == "true";

        bool isSomeToken = fieldType == "SyntaxToken" || fieldType.EndsWith("<SyntaxToken>");

        if (!isSomeToken || ConsiderTokenField(fieldName, name))
        {
            type.Fields.Add(new SyntaxField
            {
                Name = fieldName,
                Type = fieldType,
                Override = fieldOverride,
                Default = "null"
            });
        }
    }

    types.Add(type);
}

#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Microsoft.CodeAnalysis.CSharp.PatternMatching
{
<#
// This is taken from the typed builder branch because there are some fixes.
for (int phase = 1; phase < 2; phase++) {
    bool typed = phase == 0;
    string genericType = typed ? "<TResult>" : null;
#>
<# foreach (var type in types) {
    string actionType = !typed ? "Action<" + type.Name + ">" : "Func<TResult, " + type.Name + ", TResult>";
#>
    // #<#= type.LineNumber #>
    public <#= type.Abstract ? "abstract " : "" #>partial class <#= GetPatternName(type.Name, genericType) #> : <#= GetPatternName(type.BaseType, genericType) #>
    {
<# foreach (var field in type.Fields) {
    if (field.Override) continue;
#>
        private readonly <#= GetPatternName(field.Type, genericType) #> <#= GetFieldName(field.Name) #>;
<# } #>
<# if (!type.Abstract) { #>
        private readonly <#= actionType #> _action;
<# } #>
<#

var thisFields = GetAllFields(types, type.Name);
var baseFields = GetAllFields(types, type.BaseType);

#>

        internal <#= GetPatternName(type.Name, null) #>(<#
   for (int i = 0; i < thisFields.Count; i++)
   {
       if (i > 0) {
           #>, <#
       }
       #><#= GetPatternName(thisFields[i].Type, genericType) #> <#= GetLocalName(thisFields[i].Name) #><#
   }
   if (!type.Abstract)
   {
       if (thisFields.Count > 0) {
           #>, <#
       }
       #><#= actionType #> action<#
   }
   #>)
<# if (baseFields.Count > 0) { #>
            : base(<#
   for (int i = 0; i < baseFields.Count; i++)
   {
       if (i > 0) {
           #>, <#
       }
       #><#= GetLocalName(baseFields[i].Name) #><#
   }
   #>)
<# } #>
        {
<# foreach (var field in type.Fields.Where(p => !p.Override)) { #>
            <#= GetFieldName(field.Name) #> = <#= GetLocalName(field.Name) #>;
<# } #>
<# if (!type.Abstract) { #>
            _action = action;
<# } #>
        }

        internal override bool Test(SyntaxNode node, SemanticModel semanticModel)
        {
            if (!base.Test(node, semanticModel))
                return false;
            if (!(node is <#= type.Name #> typed))
                return false;

<# foreach (var field in type.Fields.Where(p => !p.Override)) { #>
<# if (field.Name == "Kind") { #>
            if (_kind != SyntaxKind.None && !typed.IsKind(_kind))
                return false;
<# } else if (GetPatternName(field.Type, null) == "string") { #>
            if (<#= GetFieldName(field.Name) #> != null && <#= GetFieldName(field.Name) #> != typed.<#= field.Name #>.Text)
                return false;
<# } else { #>
            if (<#= GetFieldName(field.Name) #> != null && !<#= GetFieldName(field.Name) #>.Test(typed.<#= field.Name #>, semanticModel))
                return false;
<# } #>
<# } #>

            return true;
        }
<# if (HasRunCallback(types, type.Name)) { #>

<# if (typed) { #>
        internal override TResult RunCallback(TResult result, SyntaxNode node, SemanticModel semanticModel)
<# } else { #>
        internal override void RunCallback(SyntaxNode node, SemanticModel semanticModel)
<# } #>
        {
<# if (HasRunCallback(types, type.BaseType)) { #>
<# if (typed) { #>
            result = base.RunCallback(result, node, semanticModel);
<# } else { #>
            base.RunCallback(node, semanticModel);
<# } #>

<# } #>
            var typed = (<#= type.Name #>)node;

<# foreach (var field in type.Fields.Where(p => CanRunCallback(p))) { #>
            if (<#= GetFieldName(field.Name) #> != null)
<# if (typed) { #>
                result = <#= GetFieldName(field.Name) #>.RunCallback(result, typed.<#= field.Name #>, semanticModel);
<# } else { #>
                <#= GetFieldName(field.Name) #>.RunCallback(typed.<#= field.Name #>, semanticModel);
<# } #>
<# } #>
<# if (!type.Abstract) { #>

            if (_action != null)
<# if (typed) { #>
                result = _action(result, typed);

            return result;
<# } else { #>
                _action(typed);
<# } #>
<# } else if (typed) { #>
            return result;
<# } #>
        }
<# } #>
    }

<# } #>
<# if (!typed) { #>
    partial class Pattern
<# } else { #>
    partial struct PatternBuilder<TResult>
<# } #>
    {
<# foreach (var type in types.Where(p => !p.Abstract)) {

    string actionType = !typed ? "Action<" + type.Name + ">" : "Func<TResult, " + type.Name + ", TResult>";
    var thisFields = GetAllFields(types, type.Name);

#>
        public <#= !typed ? "static " : "" #><#= GetPatternName(type.Name, genericType) #> <#= GetSimpleName(type.Name) #>(<#
   for (int i = 0; i < thisFields.Count; i++)
   {
       if (i > 0) {
           #>, <#
       }
       #><#= GetPatternName(thisFields[i].Type, genericType, true) #> <#= GetLocalName(thisFields[i].Name) #> = <#= thisFields[i].Default #><#
   }
   if (thisFields.Count > 0) {
       #>, <#
   }
   #><#= actionType #> action = null<#
   #>)
        {
            return new <#= GetPatternName(type.Name, genericType) #>(<#
   for (int i = 0; i < thisFields.Count; i++)
   {
       if (i > 0) {
           #>, <#
       }
       if (GetPatternName(thisFields[i].Type, null).StartsWith("NodeListPattern<")) {
           #>NodeList(<#= GetLocalName(thisFields[i].Name) #>)<#
       } else if (GetPatternName(thisFields[i].Type, null) == "TokenListPattern") {
           #>TokenList(<#= GetLocalName(thisFields[i].Name) #>)<#
       } else {
           #><#= GetLocalName(thisFields[i].Name) #><#
       }
   }
   if (thisFields.Count > 0) {
       #>, <#
   }
   #>action<#
   #>);
        }
<#
var paramsFields = thisFields.Where(p => ConsiderParamsFactory(type.Name, p.Type)).ToList();
if (paramsFields.Count == 1) {
    var paramsField = paramsFields[0];
    var kindField = thisFields.SingleOrDefault(p => p.Name == "Kind");
#>

        public <#= !typed ? "static " : "" #><#= GetPatternName(type.Name, genericType) #> <#= GetSimpleName(type.Name) #>(<#
        if (kindField != null) {
            #><#= kindField.Type #> <#= GetLocalName(kindField.Name) #>, <#
        }
        #>params <#= GetGenericArgumentType(paramsField.Type, genericType) #>[] <#= GetLocalName(paramsField.Name) #>)
        {
            return new <#= GetPatternName(type.Name, genericType) #>(<#
   for (int i = 0; i < thisFields.Count; i++)
   {
       if (i > 0) {
           #>, <#
       }
       if (thisFields[i] == kindField) {
           #><#= GetLocalName(kindField.Name) #><#
       } else if (thisFields[i] != paramsField) {
           #><#= thisFields[i].Default #><#
       } else if (GetPatternName(paramsField.Type, null).StartsWith("NodeListPattern<")) {
           #>NodeList(<#= GetLocalName(paramsField.Name) #>)<#
       } else if (GetPatternName(paramsField.Type, null) == "TokenListPattern") {
           #>TokenList(<#= GetLocalName(paramsField.Name) #>)<#
       }
   }
   #>, null);
        }
<# } #>
<# } #>
    }
<# } #>
}
<#+

private static bool IsListType(string name)
{
    return GetPatternName(name, null).StartsWith("NodeListPattern<");
}

private static string GetGenericArgumentType(string name, string genericType)
{
    if (name.Contains("<"))
    {
        if (name == "SyntaxList<SyntaxToken>")
            return "string";

        return GetPatternName(name.Substring(name.IndexOf('<') + 1).TrimEnd('>'), genericType);
    }

    throw new InvalidOperationException();
}

private static string GetPatternName(string name, string genericArgument, bool listAsEnumerable = false)
{
    if (name.Contains("<"))
    {
        if (name == "SyntaxList<SyntaxToken>")
            return listAsEnumerable ? "IEnumerable<string>" : "TokenListPattern";
        string baseName = name.Substring(0, name.IndexOf('<'));
        string argumentName = name.Substring(name.IndexOf('<') + 1).TrimEnd('>');
        string listGenericArgument = null;

        switch (baseName)
        {
            case "SyntaxList":
            case "SeparatedSyntaxList":
                baseName = listAsEnumerable ? "IEnumerable" : "NodeListPattern";
                if (!listAsEnumerable && genericArgument != null)
                    listGenericArgument = ", " + genericArgument.Trim('<', '>');
                break;
            default:
                throw new InvalidOperationException("Unmapped generic type '" + baseName + "'");
        }

        return baseName + "<" + GetPatternName(argumentName, genericArgument) + listGenericArgument + ">";
    }

    switch (name)
    {
        case "CSharpSyntaxNode":
            return "PatternNode" + genericArgument;
        case "SyntaxToken":
            return "string";
        case "SyntaxKind":
            return name;
    }
    
    if (!name.EndsWith("Syntax"))
        throw new InvalidOperationException("Invalid pattern name " + name);

    return name.Substring(0, name.Length - 6) + "Pattern" + genericArgument;
}

private static string GetSimpleName(string name)
{
    if (!name.EndsWith("Syntax"))
        throw new InvalidOperationException("Invalid pattern name " + name);

    return name.Substring(0, name.Length - 6);
}

private static string GetFieldName(string name)
{
    return "_" + LowerName(name);
}

private static string GetLocalName(string name)
{
    string lowerName = LowerName(name);
    switch (lowerName)
    {
        case "else":
        case "default":
        case "finally":
            return "@" + lowerName;
        default:
            return lowerName;
    }
}

private static string LowerName(string name)
{
    return name.Substring(0, 1).ToLowerInvariant() + name.Substring(1);
}

private static bool ConsiderTokenField(string name, string type)
{
    if (name.EndsWith("Token"))
        return false;

    switch (name)
    {
        case "Identifier":
        case "Modifiers":
        case "Name":
            return true;
        case "Comma":
        case "Commas":
            return false;
        case "Keyword":
            return type == "PredefinedTypeSyntax";
        default:
            if (name.EndsWith("Keyword"))
                return false;
            break;
    }

    throw new InvalidOperationException("Unmapped token field name '" + type + "." + name + "'");
}

private static List<SyntaxField> GetAllFields(List<SyntaxType> types, string name)
{
    var fields = new List<SyntaxField>();
    GetAllFields(types, fields, name);
    return fields;
}

private static void GetAllFields(List<SyntaxType> types, List<SyntaxField> fields, string name)
{
    var type = types.SingleOrDefault(p => p.Name == name);
    if (type == null)
        return;

    GetAllFields(types, fields, type.BaseType);
    
    fields.AddRange(type.Fields.Where(p => !p.Override));
}

private static bool ConsiderParamsFactory(string type, string fieldType)
{
    return
        IsListType(fieldType) &&
        GetGenericArgumentType(fieldType, null) != "AttributeListPattern" &&
        GetGenericArgumentType(fieldType, null) != "TypeParameterConstraintClausePattern" &&
        !_paramsFactoryBlacklist.Contains(GetSimpleName(type));
}

private static readonly HashSet<string> _paramsFactoryBlacklist = new HashSet<string>
{
    "ArrayType",
    "QueryBody",
    "LocalFunctionStatement",
    "TryStatement",
    "TypeParameterConstraintClause",
};

private static bool HasRunCallback(List<SyntaxType> types, string name)
{
    var type = types.SingleOrDefault(p => p.Name == name);
    if (type == null)
        return false;
    if (!type.Abstract)
        return true;
    return type.Fields.Any(p => CanRunCallback(p));
}

private static bool CanRunCallback(SyntaxField field)
{
    return
        !field.Override &&
        field.Name != "Kind" &&
        GetPatternName(field.Type, null) != "string" &&
        GetPatternName(field.Type, null) != "TokenListPattern";
}

private class SyntaxType
{
    public string Name { get; set; }
    public string BaseType { get; set; }
    public bool Abstract { get; set; }
    public List<SyntaxField> Fields { get; private set; }
    public int LineNumber { get; set; }

    public SyntaxType()
    {
        Fields = new List<SyntaxField>();
    }
}

private class SyntaxField
{
    public string Name { get; set; }
    public string Type { get; set; }
    public bool Override { get; set; }
    public bool Token { get; set; }
    public string Default { get; set; }
}

#>